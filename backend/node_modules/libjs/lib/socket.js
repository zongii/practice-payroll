"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typebase_1 = require("./typebase");
const platform_1 = require("./platform");
function flip(buf, offset = 0, len = buf.length) {
    var mid = len >> 1, tmp, lside, rside;
    for (var i = 0; i < mid; i++) {
        lside = i + offset;
        rside = offset + len - i - 1;
        tmp = buf.readInt8(lside);
        buf.writeInt8(buf.readInt8(rside), lside);
        buf.writeInt8(tmp, rside);
    }
    return buf;
}
exports.flip = flip;
// TODO: We cannot use 4-byte `htonl`, because JS allows bit shifting only up to 4-bytes
// TODO: AND those 4-bytes are treated as SIGNED int, so the 32-nd bit will change the sign of the number.
function htons32(num) {
    if (platform_1.isLE)
        return ((num & 0xFF00) >> 8) + ((num & 0xFF) << 8);
    else
        return num;
}
exports.htons32 = htons32;
function hton16(num) {
    if (platform_1.isLE)
        return ((num & 0xFF00) >> 8) + ((num & 0xFF) << 8);
    else
        return num;
}
exports.hton16 = hton16;
function htons(buf, offset = 0, len = buf.length) {
    if (platform_1.isLE)
        return flip(buf, offset, len);
    else
        return buf;
}
exports.htons = htons;
// http://linux.die.net/man/3/inet_aton
// export function inet_aton(ip: string): number {
// export function inet_addr(ip: string): Ipv4 {
//     var ipobj = new Ipv4(ip);
//     htons(ipobj.buf);
//     return ipobj;
// }
class Ip {
    constructor(ip) {
        this.sep = '.';
        if (typeof ip === 'string') {
            this.buf = new Buffer(ip.split(this.sep));
        }
        else if (ip instanceof Array) {
            this.buf = new Buffer(ip);
        }
    }
    toString() {
        return Ipv4.type.unpack(this.buf).join(this.sep);
    }
    toBuffer() {
        return this.buf;
    }
    presentationToOctet(presentation) {
        return +presentation;
    }
    octetToPresentation(octet) {
        return octet;
    }
}
exports.Ip = Ip;
class Ipv4 extends Ip {
    constructor(ip = '127.0.0.1') {
        super(ip);
    }
}
Ipv4.type = typebase_1.Arr.define(platform_1.uint8, 4);
exports.Ipv4 = Ipv4;
class Ipv6 extends Ip {
    constructor(ip = '0:0:0:0:0:0:0:1') {
        super(ip);
        this.sep = ':';
    }
    presentationToOctet(presentation) {
        return parseInt(presentation, 16);
    }
    octetToPresentation(octet) {
        return octet.toString(16);
    }
}
Ipv6.type = typebase_1.Arr.define(platform_1.uint16, 16);
exports.Ipv6 = Ipv6;
