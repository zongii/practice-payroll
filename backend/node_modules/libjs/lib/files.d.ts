import { FLAG, S, SEEK } from './platform';
import { TNumber, TBuffer, TCallback, StaticBuffer } from './types';
export declare function read(fd: TNumber, buf: TBuffer): number;
export declare function readAsync(fd: TNumber, buf: TBuffer, callback: TCallback): void;
export declare function write(fd: number, buf: string | StaticBuffer): number;
export declare function writeAsync(fd: number, buf: string | StaticBuffer, callback: TCallback): void;
export declare function open(pathname: string, flags: FLAG, mode?: S | number): number;
export declare function openAsync(pathname: string, flags: FLAG, mode: S | number, callback: TCallback): void;
export declare function close(fd: number): number;
export declare function closeAsync(fd: number, callback: TCallback): void;
export declare function access(pathname: string, mode: number): number;
export declare function accessAsync(pathname: string, mode: number, callback: TCallback): void;
export declare function chmod(pathname: string, mode: number): number;
export declare function chmodAsync(pathname: string, mode: number, callback: TCallback): void;
export declare function fchmod(fd: number, mode: number): number;
export declare function fchmodAsync(fd: number, mode: number, callback: TCallback): void;
export declare function chown(pathname: string, owner: number, group: number): number;
export declare function chownAsync(pathname: string, owner: number, group: number, callback: TCallback): void;
export declare function fchown(fd: number, owner: number, group: number): number;
export declare function fchownAsync(fd: number, owner: number, group: number, callback: TCallback): void;
export declare function lchown(pathname: string, owner: number, group: number): number;
export declare function lchownAsync(pathname: string, owner: number, group: number, callback: TCallback): void;
export declare function truncate(path: string, length: number): number;
export declare function truncateAsync(path: string, length: number, callback: TCallback): void;
export declare function ftruncate(fd: number, length: number): number;
export declare function ftruncateAsync(fd: number, length: number, callback: TCallback): void;
export declare function lseek(fd: number, offset: number, whence: SEEK): number;
export declare function lseekAsync(fd: number, offset: number, whence: SEEK, callback: TCallback): void;
export declare function rename(oldpath: string, newpath: string): number;
export declare function renameAsync(oldpath: string, newpath: string, callback: TCallback): void;
export declare function fsync(fd: number): number;
export declare function fsyncAsync(fd: number, callback: TCallback): void;
export declare function fdatasync(fd: number): number;
export declare function fdatasyncAsync(fd: number, callback: TCallback): void;
